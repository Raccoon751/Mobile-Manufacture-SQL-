--SQL Advance Case Study

use db_SQLCaseStudies

SELECT * INTO CUSTOMERS FROM DIM_CUSTOMER
SELECT * INTO DATES FROM DIM_DATE
SELECT * INTO LOCATIONS FROM DIM_LOCATION
SELECT * INTO MANUFACTURERS FROM DIM_MANUFACTURER
SELECT * INTO TRANSACTIONS FROM FACT_TRANSACTIONS
SELECT * INTO MODEL FROM DIM_MODEL


SELECT * FROM CUSTOMERS
SELECT * FROM DATES
SELECT * FROM LOCATIONS
SELECT * FROM MANUFACTURERS
SELECT * FROM TRANSACTIONS
SELECT * FROM MODEL

ORDER BY IDModel
--Q1--BEGIN 
	


SELECT DISTINCT		L.State,L.Country, Date
FROM			LOCATIONS L
JOIN			TRANSACTIONS T
ON				L.IDLocation=T.IDLocation						
WHERE			YEAR(Date) >= 2005								
ORDER BY		Date



--Q1--END

--Q2--BEGIN
	

SELECT  State,Country, Manufacturer_Name, 
		COUNT(*) NO_OF_PHONES_BOUGHT						
FROM		(SELECT	IDCustomer,T.Date, L.Country, L.State,MF.Manufacturer_Name,
					DENSE_RANK() OVER (ORDER BY STATE) Ranks 
			FROM	TRANSACTIONS T
			JOIN	MODEL M
			ON		T.IDModel=M.IDModel									
			JOIN	MANUFACTURERS MF
			ON		M.IDManufacturer=MF.IDManufacturer					
			ON		T.IDLocation=L.IDLocation							
			WHERE	L.Country='US' 
					AND 
					MF.Manufacturer_Name='SAMSUNG'
			GROUP BY 
					IDCustomer,T.Date, L.Country,L.State,MF.Manufacturer_Name) AS X
WHERE	RANKS =1														
GROUP BY 
		State,Country, Manufacturer_Name 


--Q2--END

--Q3--BEGIN      


SELECT		IDModel, ZipCode, State,
			COUNT(IDCustomer) AS No_of_Transactions
FROM		TRANSACTIONS T
JOIN		LOCATIONS L
ON			T.IDLocation = L.IDLocation
GROUP BY	IDModel, ZipCode,State
ORDER BY	IDModel, ZipCode, State



--Q3--END

--Q4--BEGIN

SELECT	TOP 1	T.IDModel,MF.Manufacturer_Name,M.Model_Name,
				TotalPrice/Quantity as [Cheapest Price]		
FROM	TRANSACTIONS T
JOIN	MODEL M
ON		T.IDModel=M.IDModel
JOIN	MANUFACTURERS MF
ON		M.IDManufacturer=MF.IDManufacturer
ORDER BY 
		[Cheapest Price] ASC

--Q4--END

--Q5--BEGIN


SELECT		top 5 Manufacturer_Name,T.IDModel,
			AVG(TotalPrice) AveragePrice, 
			COUNT(Quantity) SalesQuantity
FROM		TRANSACTIONS T
INNER JOIN	MODEL M
ON			T.IDModel=M.IDModel
INNER JOIN	MANUFACTURERS MF
ON			M.IDManufacturer=MF.IDManufacturer
GROUP BY	Manufacturer_Name, T.IDModel
ORDER BY	AveragePrice DESC


--Q5--END

--Q6--BEGIN

SELECT		T.IDCustomer, Customer_Name, Email, Phone,T.Date,	
			AVG(TotalPrice) AVERAGE_AMOUNT
FROM		TRANSACTIONS T
INNER JOIN	CUSTOMERS C
ON			T.IDCustomer=C.IDCustomer
INNER JOIN	DATES D
ON			T.Date=D.DATE
WHERE		YEAR=2009
GROUP BY	T.IDCustomer, Customer_Name, Email, Phone,T.Date
HAVING		AVG(TotalPrice)>500

--Q6--END
	
--Q7--BEGIN  

SELECT * FROM (
		SELECT TOP 5 IDMODEL FROM TRANSACTIONS
		WHERE YEAR(DATE)=2008
		GROUP BY IDMODEL,YEAR(DATE)
		ORDER BY SUM(QUANTITY) DESC) AS A
INTERSECT
SELECT * FROM (
		SELECT TOP 5 IDMODEL FROM TRANSACTIONS
		WHERE YEAR(DATE)=2009
		GROUP BY IDMODEL,YEAR(DATE)
		ORDER BY SUM(QUANTITY) DESC) AS B
INTERSECT
SELECT * FROM (
		SELECT TOP 5 IDMODEL FROM TRANSACTIONS
		WHERE YEAR(DATE)=2010
		GROUP BY IDMODEL,YEAR(DATE)
		ORDER BY SUM(QUANTITY) DESC) AS C


--Q7--END	
--Q8--BEGIN

SELECT DISTINCT * FROM		
		(SELECT		T.IDModel, Model_Name, Manufacturer_Name, 
					YEAR(DATE) Years, TotalPrice, 
					DENSE_RANK() OVER (PARTITION BY YEAR(DATE) ORDER BY TOTALPRICE DESC) RANKS
		FROM		TRANSACTIONS T
		INNER JOIN	MODEL MD
		ON			T.IDModel=MD.IDModel
		INNER JOIN	MANUFACTURERS MF
		ON			MD.IDManufacturer=MF.IDManufacturer
		WHERE		YEAR(Date)=2009 
					OR 
					YEAR(Date)=2010
		) as A
WHERE RANKS=2


--Q8--END
--Q9--BEGIN
	
SELECT		MF.Manufacturer_Name
FROM		TRANSACTIONS T
JOIN		MODEL MD
ON			MD.IDModel=T.IDModel
JOIN		MANUFACTURERS MF
ON			MF.IDManufacturer=MD.IDManufacturer
WHERE		YEAR(DATE) = 2010
GROUP BY	MF.Manufacturer_Name
EXCEPT
SELECT		MF.Manufacturer_Name
FROM		TRANSACTIONS T
JOIN		MODEL MD
ON			MD.IDModel=T.IDModel
JOIN		MANUFACTURERS MF
ON			MF.IDManufacturer=MD.IDManufacturer
WHERE		YEAR(DATE) = 2009
GROUP BY	MF.Manufacturer_Name

--Q9--END

--Q10--BEGIN
	
SELECT *, (AVG_PRICE - LAG_PRICE)/LAG_PRICE AS PERCENTAGE_CHANGE FROM (
SELECT *, LAG(AVG_PRICE,1) OVER(PARTITION BY IDCUSTOMER ORDER BY YEAR) AS LAG_PRICE FROM (
SELECT IDCustomer,YEAR(Date) AS YEAR, AVG(TotalPrice) AS AVG_PRICE, SUM(Quantity) AS QUANTITY 
FROM TRANSACTIONS
WHERE IDCustomer IN (	SELECT TOP 10 IDCustomer FROM TRANSACTIONS
						GROUP BY IDCustomer
						ORDER BY SUM(TotalPrice) DESC)
GROUP BY IDCustomer, YEAR(Date)
) AS A
) AS B


--Q10--END
	